/* -*- c++ -*- */
/*
 * Copyright 2018 Andrea Montefusco IW0HDV
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdexcept>
#include <iostream>
#include <algorithm>

#include <boost/assign.hpp>
#include <boost/format.hpp>
#include <boost/detail/endian.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/thread/thread.hpp>

#include <gnuradio/io_signature.h>

#include "elad_source_c.h"
#include "arg_helpers.h"
#include "eladerror.h"

using namespace boost::assign;

#define ELAD_FORMAT_ERROR(ret, msg) \
  boost::str( boost::format(msg " (%1%)") % ret )

#define ELAD_THROW_ON_ERROR(ret, msg) \
  if ( ret != ELAD_NOERROR ) \
  { \
    throw std::runtime_error( ELAD_FORMAT_ERROR(ret, msg) ); \
  }

#define ELAD_FUNC_STR(func, arg) \
  boost::str(boost::format(func "(%1%)") % arg) + " has failed"

elad_source_c_sptr make_elad_source_c (const std::string & args)
{
  return gnuradio::get_initial_sptr(new elad_source_c (args));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr::block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 0 input and 1 output.
 */
static const int MIN_IN = 0;	// mininum number of input streams
static const int MAX_IN = 0;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
elad_source_c::elad_source_c (const std::string &args)
  : gr::sync_block ("perseus_source_c",
        gr::io_signature::make(MIN_IN, MAX_IN, sizeof (gr_complex)),
        gr::io_signature::make(MIN_OUT, MAX_OUT, sizeof (gr_complex))),
    _dev(NULL),
    _sample_rate(192000),
    _center_freq(0),
    _freq_corr(0),
    _frun(false),
    _cnt(0),
    _att_value(0),
    //_adc_preamp(false),
    //_adc_dither(false),
    _preselector(false),
    load_firmware(false)
{
  dict_t dict = params_to_dict(args);

  _dev = NULL;

  // Set debug info dumped to stderr to the maximum verbose level
  elad_set_debug(3);

  int ne = elad_init();
  if (ne == 0) {
    ELAD_THROW_ON_ERROR (-1, "No Elad device found");
  }
  //bool flag=0;
  //ELAD *descr;
  // Open the first one found...
  if ((_dev = elad_open(0)) == 0) {
    ELAD_THROW_ON_ERROR (-1, "unable to open device found");
  }
  if (elad_error == ELAD_FPGANOTCFGD) {
    fprintf(stderr, "opening rx, error: [%s] %d\n", elad_errorstr(), elad_error );
    load_firmware = true;
  }
  elad_close(_dev);

  // set the sample rate
  int rc = elad_set_sampling_rate (_dev, _sample_rate, load_firmware);
  ELAD_THROW_ON_ERROR (rc, "setting sample rate, error");

  load_firmware = false;

  fprintf(stderr, "%s firmware loading requested\n", load_firmware==true ? "" : "NO"  );
  // Open the first one found...
  if ((_dev = elad_open(0)) == 0) {
    fprintf(stderr, "opening rx, error: [%s] (%d)\n", elad_errorstr(), elad_error);
  }

  // compute sample rates available
  _sample_rates.push_back( std::pair<double, uint32_t>( 192000., 0 ) );
  _sample_rates.push_back( std::pair<double, uint32_t>( 384000., 1 ) );

  /* since they may (and will) give us an unsorted array we have to sort it here
   * to play nice with the monotonic requirement of meta-range later on */
  std::sort(_sample_rates.begin(), _sample_rates.end());

  elad_set_attenuator(_dev, 0);
  fprintf(stderr, "^^^^^^^^^^^^^^ endof ctor\n");

  // set the NCO frequency in the middle of the range allowed
  set_center_freq( (get_freq_range().start() + get_freq_range().stop()) / 2.0 );
  set_sample_rate( get_sample_rates().start() );

  _fifo = new boost::circular_buffer<gr_complex>(5000000);
  if (!_fifo) {
    throw std::runtime_error( std::string(__FUNCTION__) + " " +
                              "Failed to allocate a sample FIFO!" );
  }
  fprintf(stderr, "************* endof ctor\n");
}

/*
 * Our virtual destructor.
 */
elad_source_c::~elad_source_c ()
{
  if (_dev) {
	if (_frun) stop();
    int ret = elad_close(_dev);
    if ( ret != ELAD_NOERROR ) {
      std::cerr << ELAD_FORMAT_ERROR(ret, "Failed to close Elad") << std::endl;
    } else
      _dev = NULL;
  }
  elad_exit();

  if (_fifo) {
    delete _fifo;
    _fifo = NULL;
  }
}

int elad_source_c::elad_rx_callback(void *bufv, int buf_size)
{
  size_t i, n_avail, to_copy, num_samples;

  uint8_t *buf = (uint8_t*)bufv;
  // check for timeouts
  if (buf == 0 || buf_size == 0) return -1;

  if (elad_get_bytes_for_sample(_dev) == 4) {
      num_samples = (buf_size / sizeof(int)) /2;
     _fifo_lock.lock();

     n_avail = _fifo->capacity() - _fifo->size();
     to_copy = (n_avail < num_samples ? n_avail : num_samples);
     for (i = 0; i < to_copy; i++ ) {

       float is  = elad_scale_data (_dev, (int *)buf);
       buf += 4;
       float qs  = elad_scale_data (_dev, (int *)buf);
       buf += 4;

       // samples are floating point 32 bit , push sample to the fifo
       _fifo->push_back( gr_complex( is, qs ) );

     }
     // keep a counter of processed bytes
     _cnt += buf_size;

     _fifo_lock.unlock();

     /* We have made some new samples available to the consumer in work() */
     if (to_copy) {
       //std::cerr << "+" << std::flush;
       _samp_avail.notify_one();
     }

     /* Indicate overrun, if necessary */
     if (to_copy < num_samples)
       std::cerr << "O" << std::flush;

     return 0; // TODO: return -1 on error/stop
  } else
     return -1;
}

// static method used as callback from the libperseus-sdr library
int elad_source_c::_elad_rx_callback(void *buf, int buf_size, void *extra)
{
  elad_source_c *obj = (elad_source_c *)extra;

  return obj->elad_rx_callback((float *)buf, buf_size);

  return 0;
}


bool elad_source_c::start()
{
  int ret;

  if ( ! _dev )
    return false;

  std::cerr << "***** START COUNTER: " << _cnt
            << " mod 6 " << (_cnt % 6) << std::endl;

  _frun = true;

  // in order to guarantee samples stream synchronization
  // re-set the sample rate each time the stream is started
  //set_sample_rate( get_sample_rate() );

  ret = elad_start_async_input(_dev,
                               512  /* buffer size */,
                               elad_source_c::_elad_rx_callback,
                               (void *)this);
  if (ret != ELAD_NOERROR) {
    std::cerr << "Failed to start RX streaming ("
              << ret << ")" << std::endl;
    return false;
  } else
    return true;
}

bool elad_source_c::stop()
{
  if ( ! _dev )
    return false;

  _frun = false;

  std::cerr << "***** STOP COUNTER: " << _cnt
            << " mod 6 " << (_cnt % 6) << std::endl;

  int ret = elad_stop_async_input(_dev, true);

  if ( ret != ELAD_NOERROR ) {
    std::cerr << "Failed to stop RX streaming (" << ret << ")" << std::endl;
    return false;
  } else
    return true;
}

int elad_source_c::work( int noutput_items,
                         gr_vector_const_void_star &input_items,
                         gr_vector_void_star &output_items )
{
  gr_complex *out = (gr_complex *)output_items[0];

  if ( _frun == false ) return WORK_DONE;

  boost::unique_lock<boost::mutex> lock(_fifo_lock);

  /* Wait until we have the requested number of samples */
  int n_samples_avail = _fifo->size();

  while (n_samples_avail < noutput_items) {
    _samp_avail.wait(lock);
    n_samples_avail = _fifo->size();
  }

  for(int i = 0; i < noutput_items; ++i) {
    out[i] = _fifo->at(0);
    _fifo->pop_front();
  }

  return noutput_items;
}

std::vector<std::string> elad_source_c::get_devices()
{
  std::vector<std::string> devices;
  std::string label;

  std::string args = "elad=0,label='Elad'";
  devices.push_back( args );

  return devices;
}

size_t elad_source_c::get_num_channels()
{
  return 1;
}

osmosdr::meta_range_t elad_source_c::get_sample_rates()
{
  osmosdr::meta_range_t range;
  std::cerr << "elad_source_c::get_sample_rates()" << std::endl;

  for (size_t i = 0; i < _sample_rates.size(); i++) {
    range += osmosdr::range_t( _sample_rates[i].first );
    std::cerr << "SR: "        << i   << " : ("
              << _sample_rates[i].first << ")" << std::endl;
  }
  return range;
}

double elad_source_c::set_sample_rate( double rate )
{
  int ret;
  if (rate != _sample_rate) {
	load_firmware = true;
    if ((ret = elad_set_sampling_rate(_dev, rate, load_firmware)) < 0) {
       ELAD_THROW_ON_ERROR(ret, "Unable to set sample rate.");
    } else {
       _sample_rate = rate;
       load_firmware = false;
    }
  }
  
  return get_sample_rate();
}

double elad_source_c::get_sample_rate()
{
  return _sample_rate;
}

osmosdr::freq_range_t elad_source_c::get_freq_range( size_t chan )
{
  osmosdr::freq_range_t range;

  range += osmosdr::range_t( 0, 40e6 );

  return range;
}

double elad_source_c::set_center_freq( double freq, size_t chan )
{
  int ret;

  if (_dev) {
    ret =
    elad_set_ddc_center_freq(_dev,
                             (uint64_t)(freq * (1.0 + (_freq_corr * 10e-6)))
                            );
    if ( ret == ELAD_NOERROR ) {
      _center_freq = freq;
    } else {
      ELAD_THROW_ON_ERROR( ret, ELAD_FUNC_STR( "elad_set_ddc_center_freq", freq ) )
    }
  }

  return get_center_freq( chan );
}

double elad_source_c::get_center_freq( size_t chan )
{
  return _center_freq;
}

double elad_source_c::set_freq_corr( double ppm, size_t chan )
{
  return _freq_corr = ppm;
}

double elad_source_c::get_freq_corr( size_t chan )
{
  return _freq_corr;
}

std::vector<std::string> elad_source_c::get_gain_names( size_t chan )
{
  std::vector< std::string > names;

  names += "Attenuator";

  return names;
}

osmosdr::gain_range_t elad_source_c::get_gain_range( size_t chan )
{
    return get_gain_range( "Attenuator", chan );
}

osmosdr::gain_range_t elad_source_c::get_gain_range( const std::string & name, size_t chan )
{
  if ( "Attenuator" == name ) {
    return osmosdr::gain_range_t( -30, 0, 10 );
  }
  return osmosdr::gain_range_t();
}


double elad_source_c::set_attenuator( double gain, size_t chan )
{
  int ret;

  if (_dev && _att_value != gain) {
    ret = elad_set_attenuator (_dev, gain != 0 ? 1:0);

    if ( ELAD_NOERROR == ret ) {
      _att_value = gain;
    } else {
      std::cerr << "ERROR: elad_set_attenuator: " <<  gain << std::endl;
    }
  }

  return _att_value;
}


double elad_source_c::get_attenuator( size_t chan )
{
  return _att_value;
}


//
// no gain stage in Elad samplers/receivers, but an attenuator is there
//


double elad_source_c::set_gain( double gain, const std::string & name, size_t chan)
{
  if ( "Attenuator" == name ) {
    return set_attenuator( gain, chan );
  }
  return gain;
}


double elad_source_c::get_gain( const std::string & name, size_t chan )
{
  if ( "Attenuator" == name ) {
    return get_attenuator( chan );
  }
  return 0.0;
}


double elad_source_c::set_gain( double gain, size_t chan )
{
  return gain;
}

double elad_source_c::get_gain( size_t chan )
{
  return 0.0;
}



std::vector< std::string > elad_source_c::get_antennas( size_t chan )
{
  std::vector< std::string > antennas;

  antennas += "RX";
  antennas += "RX+FILTER";

  return antennas;
}

std::string elad_source_c::set_antenna( const std::string & antenna, size_t chan )
{
  if ( antenna == "RX" ) {
	_preselector = false;
	elad_set_filter (_dev, 0);
	return "RX";
  }
  if ( antenna == "RX+FILTER" ) {
	_preselector = true;
	elad_set_filter (_dev, 1);
    return "RX+FILTER";
  }
  return get_antenna( chan );
}

std::string elad_source_c::get_antenna( size_t chan )
{
  std::cerr << "elad_source_c::get_antenna: " << chan << std::endl;
  return "RX";
}
